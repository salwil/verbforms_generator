import json
import csv
import urllib.request

def request(action, **params):
    """formats input """
    return {'action': action, 'params': params, 'version': 6}

def invoke(action, **params):
    """original fucntion from the connect website"""
    requestJson = json.dumps(request(action, **params)).encode('utf-8')
    #print(requestJson)
    response = json.load(urllib.request.urlopen(urllib.request.Request('http://localhost:8765', requestJson)))
    if len(response) != 2:
        raise Exception('response has an unexpected number of fields')
    if 'error' not in response:
        raise Exception('response is missing required error field')
    if 'result' not in response:
        raise Exception('response is missing required result field')
    if response['error'] is not None:
        raise Exception(response['error'])
    return response['result']

def invokejson(requestJsonob):
    """ updated function to use directly an json formatted object, generated by param_creator function , instead of an classical python dict"""

    requestJsonob = json.dumps(requestJsonob).encode('utf-8')
    #print(requestJsonob)
    response = json.load(urllib.request.urlopen(urllib.request.Request('http://localhost:8765', requestJsonob)))
    if len(response) != 2:
        raise Exception('response has an unexpected number of fields')
    if 'error' not in response:
        raise Exception('response is missing required error field')
    if 'result' not in response:
        raise Exception('response is missing required result field')
    if response['error'] is not None:
        raise Exception(response['error'])


    return response['result']



def note_creator(deckName, modelName, front, back):
    """ creates the object for a single note (card) in anki, all params MUST be specified, otherwise it does not work"""
    note = {
        "deckName": deckName,
        "modelName": modelName,
        "fields": {
            "Front": "{}".format(front),
            "Back": "{}".format(back)
        }
    }
    #print("iam the note", note)
    return note

def param_creator(action, version, deckName, modelName, csvfile):
    """ creates the whole object to give the invokejson function"""
    obj = {
        "action": action,
        "version": version,
        "params": {
            "notes": []
                }
    }
    with open(csvfile) as csvfile:
        reader = csv.reader(csvfile, delimiter='\t')
        for row in reader:
            #print(row)
            #print("iam the dic",obj["params"]["notes"])
            obj["params"]["notes"].append(note_creator(deckName, modelName, front=row[0], back=row[1]))
    #print(obj)
    return obj

def execution_addNotes(csvfile, deckName="verbforms", action="addNotes", version= 6,  modelName="Basic"):
    """wrapping function to generate new anki cards directly form a CSVfile"""
    try:
        invoke('createDeck', deck=deckName)
        new_ankicards_jsonformat = param_creator(action=action, version=version, deckName=deckName, modelName=modelName,
                                                 csvfile=csvfile)
        invokejson(new_ankicards_jsonformat)
        print("i did it")
    except urllib.error.URLError:
        print("Could not connect to anki server, please make sure anki is open")





if __name__ == "__main__":

    notestest = {
        "action": "canAddNotes",
        "version": 6,
        "params": {
            "notes": [
                {
                    "deckName": "Default",
                    "modelName": "Basic",
                    "fields": {
                        "Front": "hopend",
                        "Back": "hopelessed"
                    }
                },
                {
                    "deckName": "verbgentest1",
                    "modelName": "Basic",
                    "fields": {
                        "Front": "loved",
                        "Back": "life"
                    }
                }]
        }
    }

    guitest = {
        "action": "guiAddCards",
        "version": 6,
        "params": {
            "note": {
                "deckName": "Default",
                "modelName": "Cloze",
                "fields": {
                    "Text": "hope",
                    "Extra": "Romania is a country in Europe"
                },
                "tags": [
                    "countries"
                ],
                "picture": [{
                    "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/1/13/EU-Romania.svg/285px-EU-Romania.svg.png",
                    "filename": "romania.png",
                    "fields": [
                        "Extra"
                    ]
                }]
            }
        }
    }

    notetest_Web = {
    "action": "addNotes",
    "version": 6,
    "params": {
        "notes": [
            {
                "deckName": "test2",
                "modelName": "Basic",
                "fields": {
                    "Front": "loooooo",
                    "Back": "fuuuu"
                },
                "tags": [
                    "yomichan"
                ],
                "audio": [{
                    "url": "https://assets.languagepod101.com/dictionary/japanese/audiomp3.php?kanji=猫&kana=ねこ",
                    "filename": "yomichan_ねこ_猫.mp3",
                    "skipHash": "7e2c2f954ef6051373ba916f000168dc",
                    "fields": [
                        "Front"
                    ]
                }],
                "video": [{
                    "url": "https://cdn.videvo.net/videvo_files/video/free/2015-06/small_watermarked/Contador_Glam_preview.mp4",
                    "filename": "countdown.mp4",
                    "skipHash": "4117e8aab0d37534d9c8eac362388bbe",
                    "fields": [
                        "Back"
                    ]
                }],
                "picture": [{
                    "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/A_black_cat_named_Tilly.jpg/220px-A_black_cat_named_Tilly.jpg",
                    "filename": "black_cat.jpg",
                    "skipHash": "8d6e4646dfae812bf39651b59d7429ce",
                    "fields": [
                        "Back"
                    ]
                }]
            }
        ]
    }
}


    #invoke('createDeck', deck='test2')
    #print(invokejson(notetest_Web))
    #print(invokejson(guitest))

    #newnote = note_creator("new","basic", "unic", "horn")
    #result = invoke('deckNames')
    #print('got list of decks: {}'.format(result))

    #new_notes = param_creator()
    #invokejson(notetest_Web)

    execution_addNotes("test.tsv")